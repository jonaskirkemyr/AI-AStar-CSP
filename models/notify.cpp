#include "notify.h"

/**
.#####...#####...######..##..##...####...######..######.
.##..##..##..##....##....##..##..##..##....##....##.....
.#####...#####.....##....##..##..######....##....####...
.##......##..##....##.....####...##..##....##....##.....
.##......##..##..######....##....##..##....##....######.
........................................................
**/



/*
.#####...#####....####...######..######...####...######..######..#####..
.##..##..##..##..##..##....##....##......##..##....##....##......##..##.
.#####...#####...##..##....##....####....##........##....####....##..##.
.##......##..##..##..##....##....##......##..##....##....##......##..##.
.##......##..##...####.....##....######...####.....##....######..#####..
........................................................................
*/

void Notify::tell()//tells listeners a change happend
{
	for(size_t i=0;i<listeners.size();++i)
		listeners.at(i)->handleNotification();
}




/**
.#####...##..##..#####...##......######...####..
.##..##..##..##..##..##..##........##....##..##.
.#####...##..##..#####...##........##....##.....
.##......##..##..##..##..##........##....##..##.
.##.......####...#####...######..######...####..
................................................
**/

void Notify::addListener(Listener * listen)
{
	listeners.push_back(listen);
}

void Notify::removeListener(Listener* listen)
{
	auto pos=find(listeners.begin(),listeners.end(),listen);

	if(pos!=listeners.end())//only remove pointer if actually exists 
		listeners.erase(pos);

}